#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

DOTNET_SDK_VERSION="1.0.4"
DOTNET_RUNTIME_VERSION="1.1.0"
LIBUNWIND_VERSION="1.1-4.1"

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
DEPLOYMENT_FILE_LOCATION=${BUILD_DIR}/.deployment

# Download dependencies
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
FAKE_ROOT_DIR="$CACHE_DIR/fake_root_dir"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p $FAKE_ROOT_DIR
mkdir -p $FAKE_ROOT_DIR/etc/apt
mkdir -p $FAKE_ROOT_DIR/usr/lib/apt

# Set up temp APT directory
cp -R /etc/apt/* $FAKE_ROOT_DIR/etc/apt
cp -R /usr/lib/apt/* $FAKE_ROOT_DIR/usr/lib/apt

APT_OPTIONS="-o debug::nolocking=true -o dir::bin::solvers=$FAKE_ROOT_DIR/usr/lib/apt/solvers -o dir::bin::methods=$FAKE_ROOT_DIR/usr/lib/apt/methods -o dir=$FAKE_ROOT_DIR -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

echo "Updating apt"
apt $APT_OPTIONS update

# Essentials
apt $APT_OPTIONS -y --force-yes -d install --reinstall apt-transport-https
dpkg -x $APT_CACHE_DIR/archives/apt-transport-https*.deb $FAKE_ROOT_DIR/

export PATH="$FAKE_ROOT_DIR/usr/bin:$PATH"
export LD_LIBRARY_PATH="$FAKE_ROOT_DIR/usr/lib/x86_64-linux-gnu:$FAKE_ROOT_DIR/usr/lib/i386-linux-gnu:$FAKE_ROOT_DIR/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$FAKE_ROOT_DIR/usr/lib/x86_64-linux-gnu:$FAKE_ROOT_DIR/usr/lib/i386-linux-gnu:$FAKE_ROOT_DIR/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$FAKE_ROOT_DIR/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$FAKE_ROOT_DIR/usr/lib/x86_64-linux-gnu/pkgconfig:$FAKE_ROOT_DIR/usr/lib/i386-linux-gnu/pkgconfig:$FAKE_ROOT_DIR/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

# Install everything

# libunwind
echo "Fetching libunwind"
apt $APT_OPTIONS -y --force-yes -d install --reinstall libunwind8 mawk coreutils

export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"

# Install everything
for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  echo "Installing $(basename $DEB)"
  dpkg -x $DEB $FAKE_ROOT_DIR
done

export PATH="$FAKE_ROOT_DIR/usr/bin:$PATH"

# Download dotnet
echo "Fetching dotnet"
DOTNET_DIR=$CACHE_DIR/dotnet
mkdir $DOTNET_DIR
curl -sSL -o $DOTNET_DIR/dotnet.tar.gz https://go.microsoft.com/fwlink/?linkid=848826
mkdir -p $DOTNET_DIR/dotnet && tar zxf $DOTNET_DIR/dotnet.tar.gz -C $DOTNET_DIR/dotnet

export PATH="$CACHE_DIR/dotnet:$PATH"

# Determine csproj location
if [ -e ${DEPLOYMENT_FILE_LOCATION} ]; then
  PROJECT_DIR=$BUILD_DIR/$(awk -F "=" '/project/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ')
  CSPROJ_FILE=$(find $PROJECT_DIR -maxdepth 3 -iname "*.csproj")
	echo "Project file configured in .deployment file"
fi

# Compile and publish
cd $PROJECT_DIR
dotnet restore
dotnet publish ${CSPROJ_FILE} --output ${BUILD_DIR} $DNU_FLAGS --runtime ubuntu.16.04-x64 --configuration Release
